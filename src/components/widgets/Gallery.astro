---
// (all of this code before the html is run on the server)
import { generateSrcset } from "~/utils/images";
import type { IKImage } from "~/types/api";

const { gallery: selectedGallery } = Astro.params; // grab gallery string from url

const key = import.meta.env.IK_PRIVATE_KEY || "";
// fetch imagekit photos from portfolio folder
const res = await fetch(`https://api.imagekit.io/v1/files?path=portfolio/${selectedGallery}`, {
  method: "GET",
  headers: {
    Authorization: `Basic ${btoa(key + ":")}`,
    "Content-Type": "application/json",
  },
});
const data: IKImage[] = await res.json();
data.sort((a, b) => Date.parse(b.createdAt) - Date.parse(a.createdAt)); // sort by date created descending

// this config is to generate correct srcset sizes for responsive images
const mConfig = {
  numCols: 4, // max number of columns
  columnGap: 16, // gap between columns
  containerPadding: 32, // total padding for the container holding all images (16px on each side)
  columnSize: 300, // max size a column can be
  containerMaxWidth: 1536, // max width of the container in px (we constrain container with tailwind max-w-screen-2xl class)
};

let sizes = "";
let maxImageWidth = mConfig.columnSize;
let srcsetSizes: number[] = [maxImageWidth];

/*
calculating big brain srcset sizes
max-width: 32 + 280 + (16 + 280) * {col_num - 1} - 1
image-width: {max_width - 32 - 16 * {col_num - 2}} / {col_num - 1}
viewport-width: {{image-width} / {max_width}} * 100
*/
for (let i = 2; i < mConfig.numCols + 2; ++i) {
  const maxWidth =
    mConfig.containerPadding +
    mConfig.columnSize +
    (mConfig.columnGap + mConfig.columnSize) * (i - 1) -
    1;
  const imageWidth = Math.ceil(
    (maxWidth - mConfig.containerPadding - mConfig.columnGap * (i - 2)) / (i - 1)
  );
  maxImageWidth = Math.max(imageWidth, maxImageWidth);
  const viewportWidth = Math.ceil((imageWidth / maxWidth) * 100);

  if (i == mConfig.numCols + 1) {
    // for last column
    // sizes += `${viewportWidth}vw`; // use this if container is not clipped
    // otherwise use concrete pixel max width
    sizes += `${mConfig.containerMaxWidth}px`;
  } else {
    sizes += `(max-width:${maxWidth}px) ${viewportWidth}vw, `;
  }
}

// generate different srcset sizes (1x, 1.5x, 2x, 2.5x, 3x)
for (let i = 1.0; i < 3.5; i += 0.5) {
  srcsetSizes.push(Math.ceil(maxImageWidth * i));
}
---

<div id="gallery" class="grid max-w-screen-2xl m-auto min-h-screen" transition:animate="fade">
  {
    data?.map((photo) => {
      let srcset = generateSrcset(srcsetSizes, photo.url);

      return (
        <div id="photo" class="grid-item ">
          <a
            id="photo"
            class="block rounded-md overflow-hidden slidein-intersect cursor-zoom-in relative"
            data-pswp-src={`${photo.url}?tr=w-${mConfig.columnSize},q-30`}
            data-pswp-srcset={srcset}
            data-pswp-width={photo.width}
            data-pswp-height={photo.height}
          >
            <img
              class="lazyload blurred hover:scale-[1.03]"
              src={`${photo.url}?tr=w-${mConfig.columnSize},q-30`}
              data-sizes={sizes}
              data-srcset={srcset}
              alt={photo.name}
              width={photo.width}
              height={photo.height}
            />
          </a>
        </div>
      );
    })
  }
</div>
<style>
  /* ---- old masonry layout ----
  TODO: use this on no javascript enabled */
  /* .masonry-with-columns {
    columns: 4 240px;
    column-gap: 1rem;
    padding: 0rem 1rem;
  }
  .masonry-with-columns > div {
    display: inline-block;
    margin-bottom: 1rem;
    overflow: hidden;
  } */
  /* ----------------------------- */

  .grid {
    width: 100%;
    position: relative;
  }
  .grid-item {
    position: absolute;
  }
</style>
<script>
  import "lazysizes";
  import MiniMasonry, { type MiniMasonryOptions } from "minimasonry";
  import PhotoSwipeLightbox from "photoswipe/lightbox";
  import "photoswipe/style.css";

  // create masonry layout
  let masonryOptions: MiniMasonryOptions = {
    container: ".grid",
    baseWidth: 300,
    gutter: 16,
    ultimateGutter: 16,
  };
  let masonry = new MiniMasonry(masonryOptions);
  masonry.layout();

  // create lightbox (for clicking images)
  let lightboxOptions = {
    bgOpacity: 0.9,
    gallery: "#gallery",
    children: "a",
    pswpModule: () => import("photoswipe"),
  };

  let lightbox = new PhotoSwipeLightbox(lightboxOptions);
  lightbox.init();

  document.addEventListener("astro:after-swap", () => {
    // destroy on view transitions between galleries
    masonry.destroy();
    lightbox.destroy();
  });

  document.addEventListener("astro:after-swap", () => {
    // we need to relayout on view transitions between galleries
    masonry = new MiniMasonry(masonryOptions);
    masonry.layout();

    lightbox = new PhotoSwipeLightbox(lightboxOptions);
    lightbox.init();
  });
</script>
